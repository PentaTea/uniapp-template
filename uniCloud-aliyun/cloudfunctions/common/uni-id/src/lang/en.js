const word = {
  alipay: 'alipay',
  wechat: 'wechat',
  user: 'user',
  'user-id': 'user id',
  'dcloud-appid': 'DCloud appid',
  'dcloud-appid-list': 'DCloud appid list',
  account: 'account',
  username: 'username',
  email: 'email',
  mobile: 'phone number',
  'wechat-openid': 'wechat openid',
  'wechat-account': 'wechat account',
  'alipay-account': 'alipay account',
  'qq-openid': 'QQ openid',
  'qq-account': 'QQ account',
  'apple-account': 'apple account',
  password: 'password',
  'verify-code': 'verify code',
  'verify-code-type': 'verify code type',
  'user-unique-param': 'username, email or mobile phone number',
  'role-id': 'role id',
  'permission-id': 'permission id',
  login: 'login',
  'verify-mobile': 'verify mobile phone number',
}

const sentence = {
  // dev
  'context-param-required':
    "You should pass {param} in context using uniID.createInstance, eg: uniID.createInstance({context: {PLATFORM: 'h5'}})",
  'config-param-require': "{param} is required in uni-id's config",
  'uni-verify-config-required': 'univerify config required: service.univerify',
  'login-with-invite-type-required': 'parameter type is required when forceInviteCode set to true',
  'type-array-required': 'type of {param} must be array',
  'query-field-warning':
    "You are using multi query field to login, be aware that uni-id will not check username's fromat, eg: abc@xx.com is a valid username for uni-id. You should check username in your code.",
  'add-role-admin-is-not-allowed': 'add role with an id of "admin" is not allowed',
  'password-secret-type-error': 'passwordSecret in config must be string or array',
  'token-expires-config-warning': 'tokenExpiresIn must be greater than tokenExpiresThreshold',
  'type-function-required': '{param} must be a function',
  'dev-warning': 'warning: uniID.dev is only for development',
  'config-file-invalid':
    'invalid config file (common/uni-config-center/uni-id/config.json), comment is not allowed',
  'config-file-not-found': 'config file (common/uni-config-center/uni-id/config.json) not found',
  'hx-version-warning':
    'The version of your HBuilderX is too lower, please upgrade to the latest version of HBuilderX',
  // end user message
  'account-banned': 'account is banned',
  'user-not-exist': 'user does not exist',
  'multi-user-matched': 'multiple users matched',
  'user-info-error': 'user info error',
  'user-account-conflict': 'user account conflict',
  'password-error': 'password error',
  'password-error-exceed-limit': 'password error exceed limit',
  'account-already-registed': '{type} is already registed',
  'account-not-registed': '{type} is not registed',
  'invalid-invite-code': 'invalid invite code',
  'get-third-party-account-failed': 'get {account} failed',
  'param-required': '{param} is required',
  'check-device-feature-failed': 'check device feature failed',
  'token-not-exist': 'token is not exist',
  'token-expired': 'token is expired',
  'check-token-failed': 'check token failed',
  'invalid-old-password': 'invalid old password',
  'param-error': '{param} error, {reason}',
  'invalid-verify-code': 'invalid verify code',
  'send-sms-code-failed': 'send sms code failed',
  'account-already-bound': '{type} is already bound',
  'unbind-failed': 'unbind failed',
  'set-invite-code-failed': 'set invite code failed',
  'modify-invite-code-is-not-allowed': 'invite code modification is not allowed',
  'decrypt-weixin-data-failed': 'decrypt weixin data failed',
  'invalid-weixin-appid': 'invalid weixin appid',
  'database-operation-failed': 'database operation failed',
  'role-not-exist': 'role does not exist',
  'permission-not-exist': 'permission does not exist',
}

export default {
  ...word,
  ...sentence,
}
